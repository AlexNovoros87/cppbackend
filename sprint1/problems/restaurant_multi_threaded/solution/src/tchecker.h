#include <atomic>
#include <cassert>

/*
Чтобы обнаружить состояние гонки в классе Order, создайте вспомогательный класс 
ThreadChecker. Конструктор этого класса принимает ссылку на std::atomic_int, 
атомарную переменную типа int, увеличивает и запоминает её значение. 
Используется атомарная переменная, так как инкремент атомарной переменной в 
нескольких потоках даёт предсказуемые результаты. 

Инкремент обычной переменной выполнить предсказуемым образом в нескольких 
потоках получится только если использовать примитивы синхронизации, 
например мьютекс.


Деструктор проверяет, что за период между вызовом конструктора и деструктора 
значение атомарной переменной не изменилось. 
Если несколько потоков в пересекающиеся моменты времени создадут экземпляры 
ThreadChecker, ссылающиеся на одну и ту же атомарную переменную, 
значение атомарной переменной не совпадёт с ожидаемым значением в деструкторе 
и программа аварийно завершит работу.
*/



class ThreadChecker {
public:
    explicit ThreadChecker(std::atomic_int& counter)
        : counter_{counter} {
    }

    ThreadChecker(const ThreadChecker&) = delete;
    ThreadChecker& operator=(const ThreadChecker&) = delete;

    ~ThreadChecker() {
        // assert выстрелит, если между вызовом конструктора и деструктора
        // значение expected_counter_ изменится
        assert(expected_counter_ == counter_);
    }

private:
    std::atomic_int& counter_;
    int expected_counter_ = ++counter_;
}; 
